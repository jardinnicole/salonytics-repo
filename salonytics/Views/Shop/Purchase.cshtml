@model salonytics.Models.Entities.Inventory

@{
    ViewData["Title"] = "Purchase Item";
}

<h1>Purchase Item: @Model.ItemName</h1>

<div class="container">
    <div class="row">
        <!-- Item Details Card (1/2 width) -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Item Details</h3>
                    <p>Name: @Model.ItemName</p>
                    <p>Description: @Model.Description</p>
                    <p>Price: P @Model.Price</p>
                    <p>Quantity: @ViewData["Quantity"]</p>
                    <p>Total Price: P @(Model.Price * Convert.ToInt32(ViewData["Quantity"]))</p>
                </div>
            </div>
        </div>

        <!-- PayPal Form Card (1/2 width) -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Pay with PayPal</h3>
                    <div id="paypal-button-container"></div>
                    <form id="payment-form" asp-action="Purchase" asp-controller="Shop" method="post" style="display:none;">
                        <input type="hidden" name="itemId" value="@Model.Id" />
                        <input type="hidden" id="transactionId" name="transactionId" value="" />
                        <input type="hidden" id="payerId" name="payerId" value="" />
                        <input type="hidden" name="quantity" value="@ViewData["Quantity"]" />
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://www.paypal.com/sdk/js?client-id=AVRblYaeN8hvFHv3ziroGSRMxfKZ0sNqpYok-4OWkiJ5MUWhh20BcAKqFXC6K8XFGkf0jCQ5sHRHWlQj"></script>
    <script>
        $(document).ready(function () {
            // Initialize PayPal Button
            paypal.Buttons({
                createOrder: function (data, actions) {
                    var totalPrice = parseFloat('@Model.Price') * parseInt('@ViewData["Quantity"]');

                    return actions.order.create({
                        purchase_units: [{
                            amount: {
                                value: totalPrice.toFixed(2) // Ensure the price is in the correct format
                            }
                        }]
                    });
                },
                onApprove: function (data, actions) {
                    return actions.order.capture().then(function (details) {
                        alert('Transaction completed by ' + details.payer.name.given_name);
                        // Set the transaction details in the hidden form
                        document.getElementById('transactionId').value = details.id;
                        document.getElementById('payerId').value = details.payer.payer_id;
                        // Submit the form after successful payment
                        document.getElementById('payment-form').submit();
                    });
                }
            }).render('#paypal-button-container'); // Display the PayPal button in the container
        });
    </script>
}


    <style>
        .card {
            margin-bottom: 20px;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        }

        .card-body {
            padding: 20px;
        }
    </style>
