@model salonytics.Models.ScheduleViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using System.Security.Claims

@{
    ViewData["Title"] = "Book Appointment";

    if (SignInManager.IsSignedIn(User))
    {
        Layout = "_UserDashboardLayout";
    }
    else
    {
        Layout = "_FrontLayout";
    }
}
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger mt-3">
            <strong>Validation Errors:</strong>
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }
    <form asp-action="Create" asp-controller="Appointment" method="post" data-val="true">
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="form-container">
                        <h3 class="text-center">Book Appointment</h3>
                        @if (User.Identity.IsAuthenticated)
                        {
                            var userId = User.Identity.IsAuthenticated ? User.FindFirstValue(ClaimTypes.NameIdentifier) : null;
                            <input type="hidden" asp-for="Appointment.CustomerId" value="@userId" class="form-control rounded" required />
                            <span asp-validation-for="Appointment.CustomerId" class="text-danger"></span>
                        }
                        <div class="form-group mb-3">
                            <label asp-for="Appointment.FullName" class="form-label">Full Name:</label>
                            <input asp-for="Appointment.FullName" class="form-control rounded" readonly="@User.Identity.IsAuthenticated" required="!@User.Identity.IsAuthenticated" />
                            <span asp-validation-for="Appointment.FullName" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="Appointment.ContactNo" class="form-label">Contact No:</label>
                            <input asp-for="Appointment.ContactNo" class="form-control rounded" readonly="@User.Identity.IsAuthenticated" required="!@User.Identity.IsAuthenticated" />
                            <span asp-validation-for="Appointment.ContactNo" class="text-danger"></span>
                        </div>
                        <div class="form-group mb-3">
                            <label asp-for="Appointment.Email" class="form-label">Email:</label>
                            <input asp-for="Appointment.Email" class="form-control rounded" readonly="@User.Identity.IsAuthenticated" />
                            <span asp-validation-for="Appointment.Email" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Appointment.ServiceId" class="form-label">Service:</label>
                            <select asp-for="Appointment.ServiceId" class="form-control rounded" asp-items="Model.Services" id="ServiceId" required>
                                <option value="">Select Service</option>
                                @foreach (var service in Model.Services)
                                {
                                    <option value="@service.Value" data-price="@service.Text">@service.Text</option>
                                }
                            </select>
                            <span asp-validation-for="Appointment.ServiceId" class="text-danger"></span>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Appointment.NoOfHeads" class="form-label">Number of Heads:</label>
                            <input asp-for="Appointment.NoOfHeads" class="form-control rounded" id="NoOfHeads" />
                            <span asp-validation-for="Appointment.NoOfHeads" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group mb-3">
                        <label asp-for="Appointment.TotalPrice" class="form-label">Total Price:</label>
                        <input asp-for="Appointment.TotalPrice" class="form-control rounded" id="TotalPrice" readonly />
                        <span asp-validation-for="Appointment.TotalPrice" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label id="ReservationFeeLabel" class="form-label">Reservation Fee:</label>
                        <span id="ReservationFee" class="form-control rounded" readonly></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Appointment.BranchId" class="form-label">Branch:</label>
                        <select asp-for="Appointment.BranchId" class="form-control rounded" id="BranchId" required>
                            <option value="">Select Branch</option>
                            @foreach (var branch in Model.Branches)
                            {
                                <option value="@branch.Value">@branch.Text</option>
                            }
                        </select>
                        <span asp-validation-for="Appointment.BranchId" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <select asp-for="Appointment.StylistId" class="form-control rounded" id="StylistId" required>
                            <option value="">Select Stylist</option>
                            @foreach (var stylist in Model.Stylists)
                            {
                                <option value="@stylist.Value">@stylist.Text</option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Appointment.Date" class="form-label">Date:</label>
                        <input type="text" id="SelectedDate" class="form-control rounded custom-datepicker" />
                        <input asp-for="Appointment.Date" type="hidden" id="hiddenField" class="form-control" runat="server" required />
                        <span asp-validation-for="Appointment.Date" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Appointment.StartTime" class="form-label">Time:</label>
                        <select asp-for="Appointment.StartTime" class="form-control rounded" id="StartTime" required>
                            <option value="">Select Time</option>
                        </select>
                        <span asp-validation-for="Appointment.StartTime" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Appointment.Remarks" class="form-label">Remarks:</label>
                        <input asp-for="Appointment.Remarks" class="form-control rounded" />
                        <span asp-validation-for="Appointment.Remarks" class="text-danger"></span>
                    </div>

                    <div class="form-group text-center">
                        <div class="form-check">
                            <input type="checkbox" id="TermsCheckbox" class="form-check-input" required />
                            <label for="TermsCheckbox" class="form-check-label">
                                I agree to the <a href="#" data-bs-toggle="modal" data-bs-target="#termsModal">
                                    Terms and Conditions
                                </a>.
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary rounded-pill">Book Appointment</button>
            </div>
    </form>

    <!-- Modal -->
    <div class="modal fade" id="termsModal" tabindex="-1" aria-labelledby="termsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="termsModalLabel">Terms and Conditions</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @Html.Partial("_TermsAndConditionsPartial")
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/js/bootstrap-datepicker.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-datepicker@1.9.0/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />

    <script>
        $(document).ready(function () {
            // Initialize date picker
            $('#SelectedDate').datepicker({
                format: 'yyyy-mm-dd',
                autoclose: true,
                startDate: new Date(),
                beforeShowDay: function (date) {
                    var dateString = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);
                    return { enabled: $.inArray(dateString, @Html.Raw(Json.Serialize(Model.FullyBookedDates.Select(d => d.ToString("yyyy-MM-dd")).ToList()))) === -1 };
                }
            });

            function getDateFromPicker() {
                var selectedDate = $("#SelectedDate").datepicker("getDate");
                if (selectedDate !== null) {
                    var year = selectedDate.getFullYear();
                    var month = ('0' + (selectedDate.getMonth() + 1)).slice(-2); // Ensure 2 digits
                    var day = ('0' + selectedDate.getDate()).slice(-2); // Ensure 2 digits
                    var isoDate = year + '-' + month + '-' + day; // Construct ISO date string

                    console.log(isoDate);
                    document.getElementById('hiddenField').value = isoDate;
                    return isoDate;
                } else {
                    console.log("Please select a date.");
                    return null;
                }
            }

            $('#SelectedDate').change(function () {
                getDateFromPicker();
                updateSlotsAndPrice();
            });

            function updateStylists(branchId, selectedStylistId) {
                $.ajax({
                    url: '/Appointment/GetStylists',
                    method: 'GET',
                    data: { BranchId: branchId },
                    success: function (data) {
                        var stylistDropdown = $('#StylistId');
                        stylistDropdown.empty();
                        stylistDropdown.append($('<option>', { value: '', text: 'Select Stylist' }));
                        $.each(data, function (index, stylist) {
                            stylistDropdown.append($('<option>', {
                                value: stylist.stylistId,
                                text: stylist.name
                            }));
                        });
                        // Set the selected stylist
                        if (selectedStylistId) {
                            stylistDropdown.val(selectedStylistId);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            }

            $('#SelectedDate, #StylistId').change(function () {
                var selectedDate = $('#SelectedDate').val();
                var stylistId = $('#StylistId').val();

                if (selectedDate && stylistId) {
                    $.ajax({
                        url: '/Appointment/GetAvailableTimes',
                        type: 'GET',
                        data: {
                            stylistId: stylistId,
                            date: selectedDate
                        },
                        success: function (data) {
                            var timeDropdown = $('#StartTime');
                            timeDropdown.empty();
                            timeDropdown.append($('<option>', {
                                value: '',
                                text: 'Select Time'
                            }));

                            $.each(data, function (i, time) {
                                timeDropdown.append($('<option>', {
                                    value: time,
                                    text: time
                                }));
                            });
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching available times:', error);
                        }
                    });
                }
            });

            function updateTotalPrice() {
                var serviceId = $('#ServiceId').val();
                var noOfHeads = $('#NoOfHeads').val();

                $.ajax({
                    url: '/Appointment/GetServicePrice',
                    method: 'GET',
                    data: { serviceId: serviceId },
                    success: function (data) {
                        var price = parseFloat(data) || 0;
                        var reservationFee = price * 0.03;
                        var totalPrice = price * parseInt(noOfHeads) || 0;
                        $('#TotalPrice').val(totalPrice.toFixed(2));
                        $('#ReservationFee').text(reservationFee.toFixed(2));
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching service price:', error);
                    }

                });
            }

            // Function to update available times and total price
            function updateSlotsAndPrice() {
                var selectedDate = getDateFromPicker();
                var stylistId = $('#StylistId').val();
                if (selectedDate && stylistId) {
                    updateAvailableTimes(stylistId, selectedDate);
                }
                updateTotalPrice();
            }

            $('#BranchId').change(function () {
                var branchId = $(this).val();
                updateStylists(branchId, null);
            });

            $('#ServiceId, #NoOfHeads').change(function () {
                updateTotalPrice();
            });

            $(document).ready(function () {
                var userId = '@(User.Identity.IsAuthenticated ? User.FindFirstValue(ClaimTypes.NameIdentifier) : null)';

                if (userId) {
                    $.ajax({
                        url: '/Appointment/GetCustomerInfo',
                        type: 'GET',
                        data: { customerId: userId },
                        success: function (data) {
                            if (data) {
                                $('#Appointment_FullName').val(data.fullName);
                                $('#Appointment_ContactNo').val(data.contactNo);
                                $('#Appointment_Email').val(data.email);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching customer info:', error);
                        }
                    });
                }
            });

            // Initial setup on page load
            updateStylists($('#BranchId').val(), null);

            // Function to update available times based on selected stylist and date
            function updateAvailableTimes(stylistId, selectedDate) {
                $.ajax({
                    url: '/Appointment/GetAvailableTimes',
                    type: 'GET',
                    data: {
                        stylistId: stylistId,
                        date: selectedDate
                    },
                    success: function (data) {
                        var timeDropdown = $('#StartTime');
                        timeDropdown.empty();
                        timeDropdown.append($('<option>', {
                            value: '',
                            text: 'Select Time'
                        }));

                        $.each(data, function (i, time) {
                            timeDropdown.append($('<option>', {
                                value: time,
                                text: time
                            }));
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching available times:', error);
                    }
                });
            }
        });

    </script>
}